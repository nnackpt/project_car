# -*- coding: utf-8 -*-
"""Selling price Car

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1swQQVN3G-484Q-_byg6X2hIezU51r3SR
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn import linear_model, metrics

"""# Model 1

MAE = 0.87

MSE = 1.41

RMSE = 1.19

R2 = 0.85

## Data preparation

### preparing เตรียมข้อมูล
"""

# import csv file
df = pd.read_csv('car_data.csv')
df

# check error column data
df.info()

# drop string data
df.drop( ['Car_Name'] , axis = 1 , inplace=True)
df.drop( ['Fuel_Type'] , axis = 1 , inplace=True)
df.drop( ['Seller_Type'] , axis = 1 , inplace=True)
df.drop( ['Transmission'] , axis = 1 , inplace=True)

# check stast data
df.describe()

# drop Owner colimn becuase its all zero value
df.drop( ['Owner'] , axis = 1 , inplace=True)

df.describe()

"""### correcting ทำความสะอาดข้อมูล"""

# find outlier
for i in df.columns :
  plt.boxplot(df[i])
  plt.title(f'{i}')
  plt.show()
  print()

#function to remove outlier
def outlier(name) :
  Q3 = np.percentile(df[f'{name}'],75)
  Q1 = np.percentile(df[f'{name}'],25)
  IQR = Q3 - Q1
  Upper_bound = Q3 + ( 1.5 * IQR )
  Lower_bound = Q1 - ( 1.5 * IQR )
  return IQR,Upper_bound,Lower_bound

# remove outlier 
#remove outlier Year column
IQR,Upper_bound,Lower_bound = outlier('Year')
df = df[ (df['Year'] <= Upper_bound) & (df['Year'] >= Lower_bound) ]
#remove outlier Selling_Price column
IQR,Upper_bound,Lower_bound = outlier('Selling_Price')
df = df[ (df['Selling_Price'] <= Upper_bound) & (df['Selling_Price'] >= Lower_bound) ]
#remove outlier Present_Price column
IQR,Upper_bound,Lower_bound = outlier('Present_Price')
df = df[ (df['Present_Price'] <= Upper_bound) & (df['Present_Price'] >= Lower_bound) ]
#remove outlier Kms_Driven column
IQR,Upper_bound,Lower_bound = outlier('Kms_Driven')
df = df[ (df['Kms_Driven'] <= Upper_bound) & (df['Kms_Driven'] >= Lower_bound) ]

for i in df.columns :
  plt.boxplot(df[i])
  plt.title(f'{i}')
  plt.show()
  print()

#remove outlier Year column
IQR,Upper_bound,Lower_bound = outlier('Year')
df = df[ (df['Year'] <= Upper_bound) & (df['Year'] >= Lower_bound) ]

plt.boxplot(df['Year'])
plt.title('Year')
plt.show()

"""## Regression"""

# กันผิดพลาด
df_regression = df.copy()
df_regression

sns.heatmap(df_regression.corr() ,annot=True)
plt.show()

# Year	Selling_Price	Present_Price	Kms_Driven
x = df_regression[['Year', 'Present_Price'	,'Kms_Driven']]
y = df_regression[['Selling_Price']]

model = linear_model.LinearRegression()
model.fit(x , y) 
print('model.intercept =',model.intercept_)
print('model.coef =',model.coef_)
print()

y_predict = model.predict(x)
df_regression['Predict'] = y_predict
df_regression.head()

PredictData = df_regression.copy()
predict = model.predict(x)
PredictData['Predict'] = predict
PredictData

MAE = metrics.mean_absolute_error(PredictData['Selling_Price'], PredictData['Predict'])
print(f'MAE = {MAE:.2f}')

MSE = metrics.mean_squared_error(PredictData['Selling_Price'], PredictData['Predict'])
print(f'MSE = {MSE:.2f}')

RMSE = (np.sqrt(MSE))
print(f'RMSE = {RMSE:.2f}')

r2 = metrics.r2_score(PredictData['Selling_Price'], PredictData['Predict'])
print(f'R2 = {r2:.2f}')